/*
examples generated by ChatGPT
*/

#include <iostream>
#include <string>
#include "Task.h"
#include "Date.h"

using namespace std;

class Note {
private:
    string content;
public:
    Note() : content("Default note content") {}
    explicit Note(const string& content) : content(content) {}
    Note(const Note& other) : content(other.content) {}
    Note& operator=(const Note& other) {
        if (this != &other) {
            content = other.content;
        }
        return *this;
    }
    friend istream& operator>>(istream& is, Note& note) {
        getline(is, note.content);
        return is;
    }
    friend ostream& operator<<(ostream& os, const Note& note) {
        os << note.content;
        return os;
    }
    string getContent() const {
        return content;
    }
};

void example1() {
    try {
        Date taskDate(2024, Month::November, Day(20, 10, 0));
        Task<Note> task("Meeting", Note("Discuss project roadmap"), taskDate);
        cout << "Task created successfully:\n";
        cout << "Task Name: " << task.getName() << "\n";
        cout << "Content: " << task.getContent() << "\n";
        cout << "Date: " << task.getDate().to_stringDate() << "\n";
    }
    catch (const TaskError& e) {
        cout << "Error: " << e.what() << endl;
    }
}

void example2() {
    try {
        Date taskDate(2024, Month::November, Day(21, 11, 30));
        Task<Note> invalidTask("", Note("This task has no name"), taskDate);
    }
    catch (const TaskError& e) {
        cout << "Caught TaskError: " << e.what() << endl;
    }
}

void example3() {
    try {
        Note originalNote("First Note Content");
        Date taskDate(2024, Month::November, Day(22, 9, 0));
        Task<Note> originalTask("Original Task", originalNote, taskDate);
        Task<Note> copiedTask = originalTask;
        cout << "\nCopied Task:\n";
        cout << "Task Name: " << copiedTask.getName() << "\n";
        cout << "Content: " << copiedTask.getContent() << "\n";
        cout << "Date: " << copiedTask.getDate().to_stringDate() << "\n";
        Task<Note> assignedTask("Assigned Task", Note("Temporary Note"), taskDate);
        assignedTask = originalTask;
        cout << "\nAssigned Task:\n";
        cout << "Task Name: " << assignedTask.getName() << "\n";
        cout << "Content: " << assignedTask.getContent() << "\n";
        cout << "Date: " << assignedTask.getDate().to_stringDate() << "\n";
    }
    catch (const TaskError& e) {
        cout << "Error: " << e.what() << endl;
    }
}

int main() {
    cout << "Example 1: Valid Task Creation\n";
    example1();
    cout << "\nExample 2: Task Creation with Empty Name (Error Case)\n";
    example2();
    cout << "\nExample 3: Copy Constructor and Assignment Operator\n";
    example3();
    return 0;
}