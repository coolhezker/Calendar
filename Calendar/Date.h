/*
by coolhezker

The Date class is a utility that represents a specific point in time, encompassing a day, month, year, and time. It provides robust methods to handle and validate the date and time, ensuring that only valid data is allowed. The Date and Day classes are designed to work together to form a comprehensive date-time system with detailed functionality.

Here are the main components and methods of the Date and Day classes:

DateError (Exception Class)
Constructor: Takes an error message string and initializes the exception.
what(): Returns the error message when the exception is caught.
Month (Enum)
An enum representing the months of the year. The months are:
January (1), February (2), March (3), April (4), May (5),
June (6), July (7), August (8), September (9), October (10),
November (11), December (12).
Day Class (Represents Day, Hour, and Minute)
This class represents the day number of the month, along with the time (hours and minutes). It ensures that valid day, hour, and minute values are provided.

Methods:
isValidDay(int N, int H, int M): Checks whether the day (N), hour (H), and minute (M) are valid. Ensures 1 <= N <= 31, 0 <= H < 24, and 0 <= M < 60.
Constructor Day(): Initializes a default day with the values 1, 10:00.
Constructor Day(int N, int H, int M): Initializes the day with the provided day number (N), hour (H), and minute (M). Throws a DateError exception if the data is invalid.
setDay(int N, int H, int M): Changes the current day to the specified values. Throws a DateError exception if the data is invalid.
getDay(): Returns a copy of the current day.
getNOD(): Returns the number of the day within the month (1 to 31).
getTime(): Returns the time as a string in the format "HH:MM", ensuring two-digit formatting for hours and minutes.
Date Class (Represents a Complete Date)
The Date class represents a complete calendar date, with year, month, and day information. It also includes time details and ensures that the date is valid according to various rules (e.g., leap years).

Methods:
isLeapYear(int Y): Checks if the given year (Y) is a leap year using the rules of the Gregorian calendar.
CountOfDays(int Y, Month M): Returns the number of days in a given month (M) of a given year (Y), considering leap years for February.
isValidYear(int Y): Validates the year (Y). The year must be greater than or equal to 0 (with some exceptions, such as 1970 being a "magic constant").
isValidDate(int Y, Month M, Day D): Validates the complete date by checking whether the year, month, and day are valid. Ensures that the day number (D.getNOD()) does not exceed the maximum days in the month for the given year.
Constructor Date(): Initializes a default date (January 1, 1970, 10:00 AM).
Constructor Date(int Y, Month M, Day D): Initializes the date with the provided year (Y), month (M), and day (D). Throws a DateError exception if the date is invalid.
setDate(int Y, Month M, Day D): Changes the current date to the specified year, month, and day. Throws a DateError exception if the date is invalid.
getDay(): Returns the day object (DayOD), which contains the specific day number, hour, and minute of the date.
to_stringDate(): Returns the complete date as a formatted string, including the year, month name, day number, and time in "HH:MM" format.
This class supports various utility functions like converting months to strings and handling errors for invalid date and time input. The leap year and date validity checks ensure that the system can be used for accurate date management over a long time span.

text generated by ChatGPT(Not Code)
*/

#ifndef DATE_H
#define DATE_H

#include <string>
#include <exception>

class DateError : public std::exception {
private:
	std::string Message;
public:
	explicit DateError(const std::string& M);
	const char* what() const noexcept override;
};

enum class Month {
	January = 1, February,
	March, April, May,
	June, July, August,
	September, October, November,
	December
};

std::string to_stringMonth(Month M); // Month in string format

class Day {
protected:
	int NumberOD; // Num of day in Month
	int Hour; // Hour of day
	int Minute; // Minute of Day
	bool isValidDay(int N, int H, int M); // check is N, M, H(Num, Hour, Minute) correct for Day
public:
	Day();
	explicit Day(int N, int H, int M);
	void setDay(int N, int H, int M); // change rows of Day
	Day getDay() const; // copy Day and return it
	int getNOD() const; // get Number Of Day
	virtual std::string getTime(); // return Hour and Minute. example: (10:00)
};

class Date {
protected:
	int Year; // Year of date
	Month MonthOD; // Month of Date
	Day DayOD; // Day of Date. this is kind of shit
	bool isLeapYear(int Y); // check is Y - leap year
	int CountOfDays(int Y, Month M); // count of days in each Month and Year
	bool isValidYear(int Y); // check is Y - valid year(Y >= 1970(magic constant)) check Date.cpp
	bool isValidDate(int Y, Month M, Day D);
public:
	Date();
	explicit Date(int Y, Month M, Day D);
	void setDate(int Y, Month M, Day D); // change rows of Date
	Day getDay() const; // copy and return Day of Date
	virtual std::string to_stringDate(); // Format Date to string. check Date.cpp
};

#endif // !DATE_H