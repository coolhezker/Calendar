/*
by coolhezker

This code defines two main classes, Day and Date, along with an enum Month, used to represent and manage date and time information.

Month Enum: Represents the 12 months of the year, with each month assigned an integer value starting from 1 for January.
Day Class: Manages a specific day with attributes for the day of the month (NumberOD), hour (Hour), and minute (Minute). It includes methods for validating and setting the day (setDay), getting the day (getDay), and formatting the time as a string.
Date Class: Represents a full date, including the year (Year), month (MonthOD), and the specific day (DayOD). It provides methods to validate and set the date (setDate), check leap years, and count the number of days in a month. The date can be formatted into a readable string (to_stringDate).
The classes include various helper functions for validating inputs and formatting the output, such as isValidDay for checking if a given day is valid and to_stringMonth for converting a Month enum into a string.

text generated by ChatGPT
*/

#ifndef DATE_H
#define DATE_H

#include <string>

enum class Month {
	January = 1, February,
	March, April, May,
	June, July, August,
	September, October, November,
	December
};

std::string to_stringMonth(Month M); // Month in string format

class Day {
protected:
	int NumberOD; // Num of day in Month
	int Hour; // Hour of day
	int Minute; // Minute of Day
	bool isValidDay(int N, int H, int M); // check is N, M, H(Num, Hour, Minute) correct for Day
public:
	Day();
	explicit Day(int N, int H, int M);
	bool setDay(int N, int H, int M); // change rows of Day
	Day getDay() const; // copy Day and return it
	int getNOD() const; // get Number Of Day
	virtual std::string getTime(); // return Hour and Minute. example: (10:00)
};

class Date {
protected:
	int Year; // Year of date
	Month MonthOD; // Month of Date
	Day DayOD; // Day of Date. this is kind of shit
	bool isLeapYear(int Y); // check is Y - leap year
	int CountOfDays(int Y, Month M); // count of days in each Month and Year
	bool isValidYear(int Y); // check is Y - valid year(Y >= 1970(magic constant)) check Date.cpp
	bool isValidDate(int Y, Month M, Day D);
public:
	Date();
	explicit Date(int Y, Month M, Day D);
	bool setDate(int Y, Month M, Day D); // change rows of Date
	Day getDay() const; // copy and return Day of Date
	virtual std::string to_stringDate(); // Format Date to string. check Date.cpp
};

#endif // !DATE_H