/*
by coolhezker

The Task class template represents a task with a specific content type. The task contains a name, content, and a date. The template uses the Concepts::General constraint to ensure that the content type T meets certain requirements such as being streamable and copyable.

Methods:
Constructor Task(): Initializes a default task with "Default" as the name, default content, and the default date.
Constructor Task(std::string N, T C, Date D): Initializes a task with a provided name (N), content (C), and date (D). Throws a TaskError exception if the name is empty.
setName(std::string N): Sets the task's name to the provided string N.
setContent(const T& cont): Sets the content of the task to the provided value cont.
setDate(Date D): Sets the task's date to the provided Date object D.
getName(): Returns the name of the task.
getContent(): Returns a constant reference to the task's content.
getDate(): Returns the task's date.
The Task class uses the Concepts::General concept to ensure that the content type T satisfies the necessary constraints for streams and copy operations. It provides a flexible structure for creating tasks with diverse content types while ensuring correctness at compile-time.

text generated by ChatGPT(not Code)
*/

#ifndef TASK_H
#define TASK_H

#include <string>
#include "Date.h"
#include "Concepts.h"

class TaskError : public std::exception {
private:
	std::string Message;
public:
	explicit TaskError(const std::string& M) : Message{ M } {};
	const char* what() const noexcept override {
		return Message.c_str();
	}
};

template<Concepts::General T>
class Task {
protected:
	std::string Name; // Name of task
	T Content; // Content of task
	Date DateOT; // Date of Task
public:
	Task() : Name{ "Default" }, Content{ T() }, DateOT{ Date() } {}; // standart Constructor
	explicit Task(std::string N, T C, Date D) { // special constructor
		if (N.empty())
			throw TaskError("Task name cannot be empty...");
		Name = N;
		Content = C;
		DateOT = D;
	}
	void setName(std::string N) { // change row Name in Task
		Name = N;
	} 
	virtual void setContent(const T& cont) { // change row Content in Task
		Content = cont;
	} 
	void setDate(Date D) { // change row Date in Task
		DateOT = D;
	} 
	std::string getName() const { // return row Name
		return Name;
	}
	const T& getContent() const { // return row Content
		return Content;
	}
	Date getDate() const { // return row Date
		return DateOT;
	}
};

#endif // !TASK_H
