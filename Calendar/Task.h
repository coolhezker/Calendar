/*
by coolhezker

ask Class:
The Task class is a templated class that represents a task with a name, content, and a date. It uses a generic type T for the task's content, and it requires the T type to meet the General concept, which means that the type must support streaming operations (<< and >> operators), as well as copy construction and assignment.

Attributes:
Name: A string representing the task's name.
Content: The content of the task, of a generic type T.
DateOT: The date of the task, represented by the Date class.
Methods:
Constructors: A default constructor and a parameterized constructor to initialize the task with a name, content, and date.
Setters: Methods to set the name, content, and date of the task.
Getters: Methods to retrieve the name, content, and date of the task.

text generated by ChatGPT

*/

#ifndef TASK_H
#define TASK_H

#include <string>
#include "Date.h"
#include "Concepts.h"

template<Concepts::General T>
class Task {
protected:
	std::string Name; // Name of task
	T Content; // Content of task
	Date DateOT; // Date of Task
public:
	Task() : Name{ "" }, Content{ T() }, DateOT{ Date() } {}; // standart Constructor
	explicit Task(std::string N, T C, Date D) : Name{ N }, Content{ C }, DateOT{ D } {}; // special constructor
	void setName(std::string N) {
		Name = N;
	} // change row Name in Task
	virtual void setContent(const T& cont) {
		Content = cont;
	} // change row Content in Task
	void setDate(Date D) {
		DateOT = D;
	} // change row Date in Task
	std::string getName() const { // return row Name
		return Name;
	}
	const T& getContent() const { // return row Content
		return Content;
	}
	Date getDate() const { // return row Date
		return DateOT;
	}
};

#endif // !TASK_H
